# Internet Radio Project - Cursor AI Rules

## Project Structure

- /src/api: API Layer (HTTP/WebSocket communication)
- /src/core: Core Layer (Business logic, state management)
- /src/hardware: Hardware Abstraction Layer (GPIO, audio devices)
- /src/system: System management
- /src/utils: Shared utilities
- /tests: Unit, integration tests
- /install: Installation scripts
- /config: Configuration files
- /docker: Docker configuration files
- /web: Frontend (Svelte/SvelteKit)
- /.github: GitHub Actions workflows

## Development Environment

- Use Docker for development and testing
- Pre-commit hooks for code quality
- VSCode for development with recommended extensions
- Separate requirements for dev and production

## Dependencies

- Core: FastAPI, Pydantic, SQLite, WebSocket
- Hardware: pigpio, python-mpv
- Testing: pytest, pytest-asyncio
- Linting: black, ruff, mypy, pylint, isort
- Frontend: Svelte, SvelteKit, Flowbite

## Testing Strategy

- Unit tests in Docker environment
- Integration tests in CI/CD
- Pre-commit test hooks
- Installation testing for ARM platforms

## CI/CD Pipeline

- GitHub Actions for testing and deployment
- Docker-based builds and tests
- Automated dependency updates
- Installation verification

## Code Quality

- Pre-commit hooks for all checks
- Type checking with mypy
- Linting with ruff and pylint
- Formatting with black and isort

## Web Interface

- Create a responsive, mobile-friendly interface using Svelte and Flowbite
- Implement real-time updates for physical control actions
- Display current status of each slot (playing/stopped)
- Show WiFi signal strength and connection status

## Configuration

- Use a single JSON file for radio station management
- Implement configurable options for hardware pins, volume behavior, etc.
- Support backup and restore of user settings

## System Management

- Implement automatic startup on power-on
- Provide update mechanism with rollback capability
- Include system health monitoring and logging

## Performance

- Optimize for quick startup and station switching
- Minimize buffering and interruptions in audio playback
- Ensure responsive web interface

## Testing

- Write unit tests for individual components
- Implement integration tests for component interactions
- Create e2e tests for full system functionality
- Use pytest for all testing

## Error Handling

- Implement comprehensive error logging
- Provide clear user feedback for errors
- Include recovery procedures for common issues

Remember to modularize code, use appropriate design patterns, and follow best practices for each technology used in the project.

Remember to:

- Run tests in Docker environment
- Use pre-commit hooks
- Follow dependency management guidelines
- Keep CI/CD pipeline updated
