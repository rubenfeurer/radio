name: Build and Release

on:
  push:
    branches: [main, develop]
    tags: ["v*"]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Optimized caching
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/piwheels
          key: ${{ runner.os }}-pip-${{ hashFiles('install/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Cache Docker layers with proper cache paths
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('docker/dev/Dockerfile.dev', 'install/requirements*.txt', 'install/system-requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Set up BuildKit with optimizations
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host
          buildkitd-flags: --debug

      # Optimized build for AMD64
      - name: Build development image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/dev/Dockerfile.dev
          platforms: linux/amd64
          load: true
          tags: radio-dev:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            DOCKER_BUILDKIT=1

      # Move cache only if new cache exists
      - name: Move cache
        run: |
          if [ -d "/tmp/.buildx-cache-new" ]; then
            rm -rf /tmp/.buildx-cache
            mv /tmp/.buildx-cache-new /tmp/.buildx-cache
          else
            echo "No new cache to move"
          fi

      # Run tests with optimized venv
      - name: Run tests in Docker
        run: |
          mkdir -p venv && chmod 777 venv
          docker compose -f docker/compose/docker-compose.dev.yml run --rm \
            --user root \
            -v ${PWD}:/home/radio/radio \
            -e MOCK_SERVICES=true \
            -e MOCK_GPIO=true \
            -e DEV_MODE=true \
            -e PYTHONPATH=/home/radio/radio \
            backend bash -c "
              cd /home/radio/radio && \
              /home/radio/radio/venv/bin/pip install pytest pytest-cov pytest-timeout && \
              /home/radio/radio/venv/bin/python -m pytest tests/ \
                --verbose \
                --cov=src/core \
                --cov=src/api \
                --cov=src/hardware \
                --cov-report=term-missing \
                --cov-fail-under=50 \
                --junitxml=/home/radio/radio/pytest-results.xml
            "

      # Set up Node.js for frontend build
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: web/package-lock.json

      # Build frontend with proper permissions
      - name: Build frontend
        working-directory: ./web
        run: |
          # Fix permissions for npm
          sudo chown -R $USER:$USER .

          # Create node_modules with proper permissions
          mkdir -p node_modules
          sudo chown -R $USER:$USER node_modules

          # Install and build
          npm ci
          npm run build

      # Export development package
      - name: Export development package
        run: |
          VERSION="develop-$(date +'%Y%m%d')-${GITHUB_SHA::7}"
          PACKAGE="radio-${VERSION}"

          # Create dist directory with sudo
          sudo mkdir -p dist
          sudo chown $USER:$USER dist

          # Copy files with verification
          cp -rv manage_radio.sh dist/
          cp -r src/ dist/
          cp -r web/build/ dist/web/
          cp -r install/ dist/
          cp -r config/ dist/
          cp -r scripts/ dist/

          # Ensure manage_radio.sh is executable
          chmod +x dist/manage_radio.sh
          chmod +x dist/install.sh

          cd dist
          tar -czf ${PACKAGE}.tar.gz ./*
          echo "PACKAGE_NAME=${PACKAGE}.tar.gz" >> $GITHUB_ENV

      # Test installation
      - name: Test installation
        run: |
          cd dist
          tar -xzf ${PACKAGE_NAME}
          docker build -f ../docker/test/Dockerfile.test-install -t radio-test-install .
          docker run --rm radio-test-install

      # Test reporting
      - name: Test Summary
        if: always()
        uses: test-summary/action@v2
        with:
          paths: |
            pytest-results.xml

      # Error notification
      - name: Notify on Failure
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.event.pull_request.number,
              body: '❌ Tests failed in release workflow'
            })

  security-scan:
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run security checks
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
        run: |
          pip install bandit snyk-sdk
          bandit -r src/
          snyk test

  build-dev:
    if: github.ref == 'refs/heads/develop'
    needs: [test]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Build frontend
        working-directory: ./web
        run: |
          npm ci
          npm run build

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build for current platform only
      - name: Build development image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/dev/Dockerfile.dev
          platforms: linux/amd64
          load: true
          tags: radio-dev:latest
          build-args: |
            BUILD_TYPE=development
          cache-from: type=gha,scope=dev
          cache-to: type=gha,scope=dev,mode=max

      # Multi-platform build
      - name: Build multi-platform image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/dev/Dockerfile.dev
          platforms: linux/amd64,linux/arm/v7
          push: false
          tags: radio-dev:latest
          build-args: |
            BUILD_TYPE=development
          cache-from: type=gha,scope=dev
          cache-to: type=gha,scope=dev,mode=max

      - name: Export development package
        run: |
          VERSION="develop-$(date +'%Y%m%d')-${GITHUB_SHA::7}"
          PACKAGE="radio-${VERSION}"

          # Create dist directory with sudo
          sudo mkdir -p dist
          sudo chown $USER:$USER dist

          # Copy files
          cp -r src/ dist/
          cp -r web/build/ dist/web/
          cp -r install/ dist/
          cp -r config/ dist/
          cp -r scripts/ dist/
          cp manage_radio.sh dist/

          # Copy install.sh from install directory
          cp install/install.sh dist/
          cp install/requirements*.txt dist/

          # Ensure install.sh is executable
          chmod +x dist/install.sh

          cd dist
          tar -czf ${PACKAGE}.tar.gz ./*
          echo "PACKAGE_NAME=${PACKAGE}.tar.gz" >> $GITHUB_ENV

      - name: Upload development artifact
        uses: actions/upload-artifact@v4
        with:
          name: radio-dev-package
          path: dist/${{ env.PACKAGE_NAME }}
          retention-days: 7

  build-prod:
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: startsWith(github.ref, 'refs/tags/')
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push production image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/prod/Dockerfile.prod
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: ${{ startsWith(github.ref, 'refs/tags/') }}
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ${{ startsWith(github.ref, 'refs/tags/') && format('ghcr.io/{0}:{1}', github.repository, github.ref_name) || '' }}
          build-args: |
            BUILD_TYPE=production
          cache-from: type=gha,scope=prod
          cache-to: type=gha,scope=prod,mode=max

      - name: Scan Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "ghcr.io/${{ github.repository }}:latest"
          format: "table"
          exit-code: "1"
          severity: "CRITICAL,HIGH"

      - name: Export production package
        run: |
          # Create dist directory
          mkdir -p dist

          # Copy install script first
          cp install/install.sh dist/ || {
            echo "Error: Failed to copy install.sh"
            ls -la install/
            exit 1
          }

          # Copy manage_radio script
          cp manage_radio.sh dist/ || {
            echo "Error: Failed to copy manage_radio.sh"
            ls -la
            exit 1
          }

          # Set permissions
          chmod +x dist/install.sh dist/manage_radio.sh || {
            echo "Error: Failed to set permissions"
            ls -la dist/
            exit 1
          }

          # Create container and copy files
          CONTAINER_ID=$(docker create ghcr.io/${{ github.repository }}:latest)
          docker cp $CONTAINER_ID:/home/radio/radio/. dist/
          docker rm $CONTAINER_ID

          # Set version
          VERSION="${GITHUB_REF#refs/tags/}"
          [ -z "$VERSION" ] && VERSION="develop-$(date +'%Y%m%d')-${GITHUB_SHA::7}"

          # Create package
          PACKAGE="radio-${VERSION}"
          cd dist
          tar -czf ${PACKAGE}.tar.gz ./*
          echo "PACKAGE_NAME=${PACKAGE}.tar.gz" >> $GITHUB_ENV

      - name: Upload production artifact
        uses: actions/upload-artifact@v4
        with:
          name: radio-prod-package
          path: dist/${{ env.PACKAGE_NAME }}

  test-package:
    needs: [build-dev, build-prod]
    if: always() && !failure() && !cancelled()
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, debian-latest]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: ${{ github.ref == 'refs/heads/develop' && 'radio-dev-package' || 'radio-prod-package' }}

      - name: Test package
        run: |
          tar -xzf *.tar.gz
          ./install.sh --test
          ./radio --version
          ./radio status

  create-release:
    needs: test-package
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: radio-prod-package

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./*.tar.gz
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
