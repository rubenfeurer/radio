name: Build and Release

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]

jobs:
  test:
    uses: ./.github/workflows/tests.yml
        
  test-install:
    uses: ./.github/workflows/test-install.yml
        
  build:
    needs: [test, test-install]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build production image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.prod
          load: true
          tags: radio:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Export built files
        run: |
          CONTAINER_ID=$(docker create radio:latest)
          mkdir -p dist
          docker cp $CONTAINER_ID:/home/radio/radio/. ./dist/
          docker rm $CONTAINER_ID
          
          # Create package name
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION="develop-$(date +'%Y%m%d')-${GITHUB_SHA::7}"
          fi
          PACKAGE="radio-${VERSION}"
          
          # Create archive
          cd dist
          tar -czf ${PACKAGE}.tar.gz ./*
          echo "PACKAGE_NAME=${PACKAGE}.tar.gz" >> $GITHUB_ENV
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: radio-package
          path: dist/${{ env.PACKAGE_NAME }}
          
  test-package:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: radio-package
          
      - name: Test package
        run: |
          tar -xzf *.tar.gz
          # Run package tests here
          
  create-release:
    needs: test-package
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: radio-package
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.PACKAGE_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}