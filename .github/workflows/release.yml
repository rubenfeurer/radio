name: Build and Release

on:
  push:
    branches: [main, develop]
    tags: ["v*"]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Optimized caching
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/piwheels
          key: ${{ runner.os }}-pip-${{ hashFiles('install/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Cache Docker layers with proper cache paths
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('docker/dev/Dockerfile.dev', 'install/requirements*.txt', 'install/system-requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Set up BuildKit with optimizations
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host
          buildkitd-flags: --debug

      # Optimized build for AMD64
      - name: Build development image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/dev/Dockerfile.dev
          platforms: linux/amd64
          load: true
          tags: radio-dev:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            DOCKER_BUILDKIT=1

      # Move cache only if new cache exists
      - name: Move cache
        run: |
          if [ -d "/tmp/.buildx-cache-new" ]; then
            rm -rf /tmp/.buildx-cache
            mv /tmp/.buildx-cache-new /tmp/.buildx-cache
          else
            echo "No new cache to move"
          fi

      # Run tests with optimized venv
      - name: Run tests in Docker
        run: |
          # Build the development image first
          docker compose -f docker/compose/docker-compose.dev.yml build

          # Create directory for test results
          mkdir -p test-results

          # Run tests in the container
          docker compose -f docker/compose/docker-compose.dev.yml run --rm \
            --user root \
            -v ${PWD}/src:/home/radio/radio/src \
            -v ${PWD}/tests:/home/radio/radio/tests \
            -v ${PWD}/config:/home/radio/radio/config \
            -v ${PWD}/test-results:/home/radio/radio/test-results \
            -e MOCK_SERVICES=true \
            -e MOCK_GPIO=true \
            -e DEV_MODE=true \
            -e PYTHONPATH=/home/radio/radio \
            backend bash -c "
              cd /home/radio/radio && \
              /home/radio/radio/venv/bin/python -m pytest tests/ \
                --verbose \
                --cov=src/core \
                --cov=src/api \
                --cov=src/hardware \
                --cov-report=term-missing \
                --cov-fail-under=50 \
                --junitxml=/home/radio/radio/test-results/pytest-results.xml
            "

      # Set up Node.js for frontend build
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: web/package-lock.json

      # Build frontend with proper permissions
      - name: Build frontend
        working-directory: ./web
        run: |
          # Fix permissions for npm
          sudo chown -R $USER:$USER .

          # Create node_modules with proper permissions
          mkdir -p node_modules
          sudo chown -R $USER:$USER node_modules

          # Install and build
          npm ci
          npm run build

      # Export development package with proper file structure
      - name: Export development package
        run: |
          VERSION="develop-$(date +'%Y%m%d')-${GITHUB_SHA::7}"
          PACKAGE="radio-${VERSION}"

          # Debug: Show current directory and files
          echo "Current directory: $(pwd)"
          echo "Files in current directory:"
          ls -la

          # Create dist directory with proper structure
          mkdir -p dist/radio

          # Copy manage_radio.sh with verification
          if [ -f "manage_radio.sh" ]; then
            cp -v manage_radio.sh dist/radio/ || {
              echo "Error copying manage_radio.sh"
              exit 1
            }
          else
            echo "Error: manage_radio.sh not found in $(pwd)"
            exit 1
          fi

          # Copy directories with verification
          for dir in src config install scripts web/build; do
            if [ -d "$dir" ]; then
              cp -rv $dir dist/radio/ || {
                echo "Error copying $dir"
                exit 1
              }
            else
              echo "Warning: $dir not found in $(pwd)"
            fi
          done

          # Set permissions
          chmod +x dist/radio/manage_radio.sh dist/radio/install/install.sh

          # Create and verify package
          cd dist
          tar -czvf "${PACKAGE}.tar.gz" radio/

          # Verify tar file was created
          if [ ! -f "${PACKAGE}.tar.gz" ]; then
            echo "Error: Failed to create tar file"
            exit 1
          fi

          echo "Created package: ${PACKAGE}.tar.gz"
          echo "PACKAGE_NAME=${PACKAGE}.tar.gz" >> $GITHUB_ENV

      # Test installation
      - name: Test installation
        run: |
          # Debug: Show current directory and dist contents
          echo "Current directory: $(pwd)"
          echo "Contents of dist directory:"
          ls -la dist/

          # Create test directory
          mkdir -p test-install
          cd test-install

          # Copy and extract package
          cp ../dist/*.tar.gz ./ || {
            echo "Error: No tar file found in dist directory"
            exit 1
          }

          tar -xzvf *.tar.gz || {
            echo "Error: Failed to extract package"
            exit 1
          }

      # Test reporting
      - name: Test Summary
        if: always()
        uses: test-summary/action@v2
        with:
          paths: "test-results/pytest-results.xml"

      # Error notification
      - name: Notify on Failure
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.event.pull_request.number,
              body: '❌ Tests failed in release workflow'
            })

  security-scan:
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run security checks
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
        run: |
          pip install bandit snyk-sdk
          bandit -r src/
          snyk test

  build-dev:
    if: github.ref == 'refs/heads/develop'
    needs: [test]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Build frontend
        working-directory: ./web
        run: |
          npm ci
          npm run build

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build for current platform only
      - name: Build development image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/dev/Dockerfile.dev
          platforms: linux/amd64
          load: true
          tags: radio-dev:latest
          build-args: |
            BUILD_TYPE=development
          cache-from: type=gha,scope=dev
          cache-to: type=gha,scope=dev,mode=max

      # Multi-platform build
      - name: Build multi-platform image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/dev/Dockerfile.dev
          platforms: linux/amd64,linux/arm/v7
          push: false
          tags: radio-dev:latest
          build-args: |
            BUILD_TYPE=development
          cache-from: type=gha,scope=dev
          cache-to: type=gha,scope=dev,mode=max

      - name: Export development package
        run: |
          VERSION="develop-$(date +'%Y%m%d')-${GITHUB_SHA::7}"
          PACKAGE="radio-${VERSION}"

          # Create dist directory
          mkdir -p dist

          # Copy files with verification
          cp -v manage_radio.sh dist/ || {
            echo "Error: manage_radio.sh not found in root"
            ls -la
            exit 1
          }

          # Copy install script
          cp -v install/install.sh dist/ || {
            echo "Error: install.sh not found in install directory"
            ls -la install/
            exit 1
          }

          # Copy requirements
          cp -v install/requirements*.txt dist/ || {
            echo "Error: requirements files not found"
            ls -la install/
            exit 1
          }

          # Copy directories
          for dir in src web/build install config scripts; do
            if [ -d "$dir" ]; then
              cp -r $dir dist/
            else
              echo "Warning: $dir directory not found"
            fi
          done

          # Set permissions
          chmod +x dist/install.sh dist/manage_radio.sh

          cd dist
          tar -czf ${PACKAGE}.tar.gz ./*
          echo "PACKAGE_NAME=${PACKAGE}.tar.gz" >> $GITHUB_ENV

      - name: Upload development artifact
        uses: actions/upload-artifact@v4
        with:
          name: radio-dev-package
          path: dist/${{ env.PACKAGE_NAME }}
          retention-days: 7

  build-prod:
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - uses: actions/checkout@v4

      # Optimize QEMU setup
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64,linux/arm/v7

      # Optimize Buildx setup
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host
          buildkitd-flags: --debug

      # Add caching for production builds
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache-prod
          key: ${{ runner.os }}-buildx-prod-${{ hashFiles('docker/prod/**/*', 'install/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-buildx-prod-

      # Login only when needed
      - name: Login to GitHub Container Registry
        if: startsWith(github.ref, 'refs/tags/')
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Optimize multi-platform build
      - name: Build and push production image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/prod/Dockerfile.prod
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: ${{ startsWith(github.ref, 'refs/tags/') }}
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ${{ startsWith(github.ref, 'refs/tags/') && format('ghcr.io/{0}:{1}', github.repository, github.ref_name) || '' }}
          build-args: |
            BUILD_TYPE=production
            BUILDKIT_INLINE_CACHE=1
          cache-from: type=local,src=/tmp/.buildx-cache-prod
          cache-to: type=local,dest=/tmp/.buildx-cache-prod-new,mode=max

      # Move cache
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache-prod
          mv /tmp/.buildx-cache-prod-new /tmp/.buildx-cache-prod

      # Export production package more efficiently
      - name: Export production package
        run: |
          # Create dist directory
          mkdir -p dist

          # Create container and copy files efficiently
          CONTAINER_ID=$(docker create ghcr.io/${{ github.repository }}:latest)
          docker cp $CONTAINER_ID:/home/radio/radio/. dist/
          docker rm $CONTAINER_ID

          # Set version
          VERSION="${GITHUB_REF#refs/tags/}"
          [ -z "$VERSION" ] && VERSION="develop-$(date +'%Y%m%d')-${GITHUB_SHA::7}"

          # Create package efficiently
          cd dist
          tar -czf radio-${VERSION}.tar.gz ./*
          echo "PACKAGE_NAME=radio-${VERSION}.tar.gz" >> $GITHUB_ENV

      # Scan Docker image
      - name: Scan Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "ghcr.io/${{ github.repository }}:latest"
          format: "table"
          exit-code: "1"
          severity: "CRITICAL,HIGH"

      - name: Upload production artifact
        uses: actions/upload-artifact@v4
        with:
          name: radio-prod-package
          path: dist/${{ env.PACKAGE_NAME }}

  test-package:
    needs: [build-dev, build-prod]
    if: always() && !failure() && !cancelled()
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, debian-latest]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: ${{ github.ref == 'refs/heads/develop' && 'radio-dev-package' || 'radio-prod-package' }}

      - name: Test package
        run: |
          # Create test directory
          mkdir -p test-install
          cd test-install
          tar -xzf ../*.tar.gz

          # Build a lightweight test container
          cat > Dockerfile.test <<EOF
          FROM debian:bullseye-slim
          WORKDIR /app
          COPY . .
          RUN apt-get update && \
              apt-get install -y python3 python3-venv && \
              rm -rf /var/lib/apt/lists/*
          ENV MOCK_SERVICES=true \
              SKIP_HARDWARE=1 \
              SKIP_NETWORK_SETUP=1 \
              SKIP_PIGPIO=1 \
              DEV_MODE=true \
              TEST_MODE=1 \
              DOCKER_ENV=1
          CMD ["./install.sh", "--test"]
          EOF

          # Build and run test
          docker build -t radio-test -f Dockerfile.test .
          docker run --rm radio-test

      # Optimize build steps with caching
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('docker/**/*', 'install/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Use BuildKit's parallel processing
      - name: Build development image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/dev/Dockerfile.dev
          platforms: linux/amd64
          load: true
          tags: radio-dev:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            DOCKER_BUILDKIT=1
            COMPOSE_DOCKER_CLI_BUILD=1

      # Multi-platform build
      - name: Build multi-platform image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/dev/Dockerfile.dev
          platforms: linux/amd64,linux/arm/v7
          push: false
          tags: radio-dev:latest
          build-args: |
            BUILD_TYPE=development
          cache-from: type=gha,scope=dev
          cache-to: type=gha,scope=dev,mode=max

      - name: Export development package
        run: |
          VERSION="develop-$(date +'%Y%m%d')-${GITHUB_SHA::7}"
          PACKAGE="radio-${VERSION}"

          # Create dist directory
          mkdir -p dist

          # Copy files with verification
          cp -v manage_radio.sh dist/ || {
            echo "Error: manage_radio.sh not found in root"
            ls -la
            exit 1
          }

          # Copy install script
          cp -v install/install.sh dist/ || {
            echo "Error: install.sh not found in install directory"
            ls -la install/
            exit 1
          }

          # Copy requirements
          cp -v install/requirements*.txt dist/ || {
            echo "Error: requirements files not found"
            ls -la install/
            exit 1
          }

          # Copy directories
          for dir in src web/build install config scripts; do
            if [ -d "$dir" ]; then
              cp -r $dir dist/
            else
              echo "Warning: $dir directory not found"
            fi
          done

          # Set permissions
          chmod +x dist/install.sh dist/manage_radio.sh

          cd dist
          tar -czf ${PACKAGE}.tar.gz ./*
          echo "PACKAGE_NAME=${PACKAGE}.tar.gz" >> $GITHUB_ENV

      - name: Upload development artifact
        uses: actions/upload-artifact@v4
        with:
          name: radio-dev-package
          path: dist/${{ env.PACKAGE_NAME }}
          retention-days: 7

  create-release:
    needs: test-package
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: radio-prod-package

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./*.tar.gz
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
