name: Build and Release

on:
  push:
    branches: [main, develop]
    tags: ["v*"]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run tests in Docker
        run: |
          docker compose -f docker/docker-compose.dev.yml run --rm \
            backend pytest tests/ \
            --cov=src \
            --cov-report=term-missing

  security-scan:
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run security checks
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
        run: |
          pip install bandit snyk-sdk
          bandit -r src/
          snyk test

  build-dev:
    if: github.ref == 'refs/heads/develop'
    needs: [test]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Build frontend
        working-directory: ./web
        run: |
          npm ci
          npm run build

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build development image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.dev
          platforms: linux/amd64,linux/arm/v7
          load: true
          tags: radio-dev:latest
          build-args: |
            BUILD_TYPE=development
          cache-from: type=gha,scope=dev
          cache-to: type=gha,scope=dev,mode=max

      - name: Export development package
        run: |
          VERSION="develop-$(date +'%Y%m%d')-${GITHUB_SHA::7}"
          PACKAGE="radio-${VERSION}"

          mkdir -p dist
          cp -r src/ dist/
          cp -r web/build/ dist/web/
          cp -r install/ dist/
          cp -r config/ dist/
          cp manage_radio.sh dist/
          cp requirements*.txt dist/

          cd dist
          tar -czf ${PACKAGE}.tar.gz ./*
          echo "PACKAGE_NAME=${PACKAGE}.tar.gz" >> $GITHUB_ENV

      - name: Upload development artifact
        uses: actions/upload-artifact@v4
        with:
          name: radio-dev-package
          path: dist/${{ env.PACKAGE_NAME }}
          retention-days: 7

  build-prod:
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: startsWith(github.ref, 'refs/tags/')
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push production image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.prod
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: ${{ startsWith(github.ref, 'refs/tags/') }}
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ${{ startsWith(github.ref, 'refs/tags/') && format('ghcr.io/{0}:{1}', github.repository, github.ref_name) || '' }}
          build-args: |
            BUILD_TYPE=production
          cache-from: type=gha,scope=prod
          cache-to: type=gha,scope=prod,mode=max

      - name: Scan Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "ghcr.io/${{ github.repository }}:latest"
          format: "table"
          exit-code: "1"
          severity: "CRITICAL,HIGH"

      - name: Export production package
        run: |
          CONTAINER_ID=$(docker create ghcr.io/${{ github.repository }}:latest)
          mkdir -p dist
          docker cp $CONTAINER_ID:/home/radio/radio/. ./dist/
          docker rm $CONTAINER_ID

          VERSION="${GITHUB_REF#refs/tags/}"
          [ -z "$VERSION" ] && VERSION="main-$(date +'%Y%m%d')"
          PACKAGE="radio-${VERSION}"
          cd dist
          tar -czf ${PACKAGE}.tar.gz ./*
          echo "PACKAGE_NAME=${PACKAGE}.tar.gz" >> $GITHUB_ENV

      - name: Upload production artifact
        uses: actions/upload-artifact@v4
        with:
          name: radio-prod-package
          path: dist/${{ env.PACKAGE_NAME }}

  test-package:
    needs: [build-dev, build-prod]
    if: always() && !failure() && !cancelled()
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, debian-latest]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: ${{ github.ref == 'refs/heads/develop' && 'radio-dev-package' || 'radio-prod-package' }}

      - name: Test package
        run: |
          tar -xzf *.tar.gz
          ./install.sh --test
          ./radio --version
          ./radio status

  create-release:
    needs: test-package
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: radio-prod-package

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./*.tar.gz
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
