name: Build and Release

on:
  push:
    branches: [main, develop]
    tags: ["v*"]
  workflow_dispatch: # Manual trigger

jobs:
  test:
    uses: ./.github/workflows/tests.yml

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Snyk
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Run Bandit
        run: |
          pip install bandit
          bandit -r src/

  build:
    needs: [test, security-scan]
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push production image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.prod
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: ${{ startsWith(github.ref, 'refs/tags/') }}
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ${{ startsWith(github.ref, 'refs/tags/') && format('ghcr.io/{0}:{1}', github.repository, github.ref_name) || '' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Export built files
        run: |
          CONTAINER_ID=$(docker create ghcr.io/${{ github.repository }}:latest)
          mkdir -p dist
          docker cp $CONTAINER_ID:/home/radio/radio/. ./dist/
          docker rm $CONTAINER_ID

          # Create package name
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION="develop-$(date +'%Y%m%d')-${GITHUB_SHA::7}"
          fi
          PACKAGE="radio-${VERSION}"

          # Create archive
          cd dist
          tar -czf ${PACKAGE}.tar.gz ./*
          echo "PACKAGE_NAME=${PACKAGE}.tar.gz" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: radio-package
          path: dist/${{ env.PACKAGE_NAME }}

      # Add build caching
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Add image scanning
      - name: Scan Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "ghcr.io/${{ github.repository }}:latest"
          format: "table"
          exit-code: "1"
          severity: "CRITICAL,HIGH"

  test-package:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, debian-latest]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: radio-package

      - name: Test package
        run: |
          tar -xzf *.tar.gz
          # Add package validation tests here

      # Add more thorough package testing
      - name: Test installation
        run: |
          ./install.sh --test
          ./radio --version
          ./radio status

  create-release:
    needs: test-package
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: radio-package

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./*.tar.gz
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
