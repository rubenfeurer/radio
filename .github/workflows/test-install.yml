name: Test Installation

on:
  push:
    branches: [main, develop]
    paths:
      - "install/**"
      - "scripts/**"
      - "Dockerfile.test-install"
      - ".github/workflows/test-install.yml"
  pull_request:
    branches: [main, develop]
    paths:
      - "install/**"
      - "scripts/**"
      - "Dockerfile.test-install"

jobs:
  test-install:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug
          driver-opts: |
            image=moby/buildkit:master
            network=host

      # Improved caching strategy
      - name: Set up Docker Buildx cache
        run: |
          mkdir -p /tmp/.buildx-cache
          touch /tmp/.buildx-cache/index.json

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Create cache directory
        run: |
          mkdir -p /tmp/.buildx-cache

      - name: Build and test installation
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.test-install
          platforms: linux/arm/v7
          load: true
          tags: radio-test-install:latest
          build-args: |
            SKIP_DEV_DEPS=1
            SKIP_PIGPIO=1
          cache-from: |
            type=local,src=/tmp/.buildx-cache
            type=gha,scope=test-install
          cache-to: |
            type=local,dest=/tmp/.buildx-cache-new,mode=max
            type=gha,scope=test-install,mode=max

      # Move cache to prevent cache growth
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Run installation test
        timeout-minutes: 10
        run: |
          docker run --privileged \
            -v /sys/fs/cgroup:/sys/fs/cgroup:ro \
            radio-test-install:latest

      - name: Test Summary
        if: always()
        run: |
          echo "## Installation Test Results" >> $GITHUB_STEP_SUMMARY
          echo "Platform: linux/arm/v7" >> $GITHUB_STEP_SUMMARY
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ Installation tests passed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Installation tests failed" >> $GITHUB_STEP_SUMMARY
          fi

  notify:
    needs: test-install
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check Status
        if: needs.test-install.result != 'success'
        run: |
          echo "Installation tests failed!"
          exit 1
