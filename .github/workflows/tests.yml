name: Radio Tests

on:
  push:
    branches: [main, develop]
    paths:
      - "src/**"
      - "tests/**"
      - "config/**"
      - "requirements*.txt"
      - ".github/workflows/**"
  pull_request:
    branches: [main, develop]

jobs:
  lint:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          pip install black pylint mypy ruff isort

      # Set up environment to match Docker container
      - name: Set up environment
        run: |
          echo "PYTHONPATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "MOCK_HARDWARE=true" >> $GITHUB_ENV
          echo "TEST_MODE=CI" >> $GITHUB_ENV

      # Run exactly the same commands as dev.sh
      - name: Run linting
        run: |
          # Format with Black
          black --fast --force-exclude '/\.' src tests

          # Run ruff with same flags as dev.sh
          ruff check \
            --ignore E501,D100,D101,D102,D103,D104,D105,D106,D107,D400,D415,ANN201,ANN202,ANN001,S101,SLF001,ARG001 \
            src tests

          # Run mypy with config file
          cd src && mypy . \
            --config-file ../mypy.ini \
            --namespace-packages \
            --explicit-package-bases

          # Run pylint with same flags as dev.sh
          cd .. && pylint --disable=C0111,C0114,C0115,C0116,E1101,R0801,R0903,W0511,C0103 src tests

      - name: Commit any formatting changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "style: format code with black"
          branch: ${{ github.head_ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

  test:
    needs: lint # Run tests after linting
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      # Cache dependencies
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r install/requirements.txt
          pip install -r install/requirements-dev.txt

      # Split tests into categories
      - name: Run unit tests
        env:
          MOCK_HARDWARE: "true"
          TEST_MODE: "CI"
        run: |
          pytest -v tests/unit/ --cov=src --cov-report=xml --junitxml=pytest-results.xml

      - name: Run API tests
        env:
          MOCK_HARDWARE: "true"
          TEST_MODE: "CI"
        run: |
          pytest -v tests/api/ --cov=src --cov-append --junitxml=pytest-results.xml

      # Add test summary
      - name: Test Summary
        uses: test-summary/action@v2
        with:
          paths: "pytest-results.xml"
        if: always()
