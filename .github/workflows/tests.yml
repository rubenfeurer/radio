name: Radio Tests

on:
  push:
    branches: [main, develop]
    paths:
      - "src/**"
      - "tests/**"
      - "config/**"
      - "requirements*.txt"
      - ".github/workflows/**"
  pull_request:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      # Install system dependencies
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libmpv1 \
            libmpv-dev \
            mpv \
            pulseaudio \
            alsa-utils

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      # Set up environment variables
      - name: Set up environment
        run: |
          echo "PYTHONPATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "MOCK_HARDWARE=true" >> $GITHUB_ENV
          echo "TEST_MODE=CI" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r install/requirements.txt
          pip install -r install/requirements-dev.txt

      # Debug directory structure
      - name: Debug directory structure
        run: |
          echo "Current directory:"
          pwd
          echo "\nDirectory contents:"
          ls -la
          echo "\nTests directory structure:"
          find tests -type d
          echo "\nPython path:"
          echo $PYTHONPATH
          echo "\nTest file contents:"
          find tests -type f -name "test_*.py"
          echo "\nMPV library location:"
          ldconfig -p | grep mpv
          echo "\nMPV version:"
          mpv --version

      # Run tests with better error handling
      - name: Run unit tests
        env:
          PYTHONPATH: ${{ github.workspace }}
          MOCK_HARDWARE: "true"
          TEST_MODE: "CI"
          LD_LIBRARY_PATH: /usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH
        run: |
          mkdir -p tests/unit tests/api
          python -m pytest \
            --verbose \
            --cov=src \
            --cov-report=xml \
            --junitxml=pytest-results.xml \
            $(find tests -type f -name "test_*.py")

      - name: Run API tests
        env:
          PYTHONPATH: ${{ github.workspace }}
          MOCK_HARDWARE: "true"
          TEST_MODE: "CI"
          LD_LIBRARY_PATH: /usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH
        run: |
          python -m pytest \
            --verbose \
            --cov=src \
            --cov-append \
            --junitxml=pytest-results.xml \
            $(find tests/api -type f -name "test_*.py")

      # Add test summary
      - name: Test Summary
        uses: test-summary/action@v2
        with:
          paths: "pytest-results.xml"
        if: always()
