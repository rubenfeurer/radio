name: Radio Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          python3-dev python3-setuptools gcc make \
          mpv libmpv-dev \
          python3-pip python3-venv \
          libasound2-dev \
          network-manager \
          alsa-utils
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install httpx pytest pytest-asyncio pytest-cov pytest-mock pytest-timeout
        
    - name: Create logs directory
      run: mkdir -p logs
        
    - name: Create mock pigpio module
      run: |
        echo 'class Callback:
            def cancel(self):
                pass
                
        class pi:
            def __init__(self, *args, **kwargs):
                self.connected = True
            def stop(self):
                pass
            def set_mode(self, *args, **kwargs):
                pass
            def set_pull_up_down(self, *args, **kwargs):
                pass
            def callback(self, *args, **kwargs):
                return Callback()  # Return cancellable callback object
            def get_pigpio_version(self, *args, **kwargs):
                return 1
            def set_glitch_filter(self, *args, **kwargs):
                pass
            def read(self, *args, **kwargs):
                return 0
            def write(self, *args, **kwargs):
                pass

        # GPIO constants
        INPUT = 0
        OUTPUT = 1
        PUD_UP = 2
        PUD_DOWN = 1
        EITHER_EDGE = 2
        RISING_EDGE = 1
        FALLING_EDGE = 0' > pigpio.py
        export PYTHONPATH=$PYTHONPATH:$(pwd)
        
    - name: Run tests with mocked hardware
      env:
        MOCK_HARDWARE: "true"
        PYTHONPATH: .
        TEST_MODE: "CI"
        DISABLE_HARDWARE: "true"
        SKIP_NM_CHECK: "true"
        SKIP_PIGPIO: "true"
        PIGPIO_MOCK: "true"
        PYTEST_TIMEOUT: "30"
        PYTEST_ASYNCIO_MODE: "auto"
        LOG_DIR: "logs"
      run: |
        # Create mock pigpio environment
        sudo mkdir -p /run/pigpio
        sudo touch /run/pigpio/pigpio.pid
        
        PYTHONPATH=. pytest -v tests/ \
          --cov=src \
          --capture=no \
          --log-cli-level=DEBUG \
          --asyncio-mode=auto \
          -p no:warnings \
          --ignore=tests/hardware \
          --ignore=tests/integration \
          -k "not test_gpio and not test_hardware"
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  check:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Tests passed
        run: echo "All tests passed successfully!"