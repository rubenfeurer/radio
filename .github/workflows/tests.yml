name: Radio Tests

on:
  push:
    branches: [main, develop]
    paths:
      - "src/**"
      - "tests/**"
      - "config/**"
      - "requirements*.txt"
      - ".github/workflows/**"
  pull_request:
    branches: [main, develop]

jobs:
  lint:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0 # Fetch all history

      - name: Configure Git
        run: |
          git config --global pull.rebase true
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          pip install black pylint mypy ruff

      # Run exactly the same commands as dev.sh
      - name: Run linting
        run: |
          black .
          ruff check .
          mypy src
          pylint src tests config

      - name: Commit any formatting changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "style: format code with black"
          branch: ${{ github.head_ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run linting
        run: |
          # Run black formatter check
          black --check .

          # Run mypy with our configured settings
          cd src && mypy . \
            --ignore-missing-imports \
            --follow-imports=silent \
            --disable-error-code=attr-defined \
            --disable-error-code=import \
            --disable-error-code=import-not-found \
            --disable-error-code=import-untyped \
            --no-strict-optional \
            --no-warn-return-any \
            --allow-untyped-defs \
            --allow-untyped-calls \
            --allow-incomplete-defs

          # Run pylint with our .pylintrc
          cd .. && pylint src/ tests/ config/ \
            --disable=C0111,C0103,W0718,W1203,R0903,W0613,E0401,R0902,R0913,W0621,W0212,R0801 \
            --max-line-length=100

  test:
    needs: lint # Run tests after linting
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      # Cache dependencies
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r install/requirements.txt
          pip install -r install/requirements-dev.txt

      # Split tests into categories
      - name: Run unit tests
        env:
          MOCK_HARDWARE: "true"
          TEST_MODE: "CI"
        run: |
          pytest -v tests/unit/ --cov=src --cov-report=xml --junitxml=pytest-results.xml

      - name: Run API tests
        env:
          MOCK_HARDWARE: "true"
          TEST_MODE: "CI"
        run: |
          pytest -v tests/api/ --cov=src --cov-append --junitxml=pytest-results.xml

      # Add test summary
      - name: Test Summary
        uses: test-summary/action@v2
        with:
          paths: "pytest-results.xml"
        if: always()
