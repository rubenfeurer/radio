name: Radio Tests

on:
  push:
    branches: [main, develop]
    paths:
      - "src/**"
      - "tests/**"
      - "requirements*.txt"
      - ".github/workflows/**"
  pull_request:
    branches: [main, develop]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          pip install black pylint mypy ruff

      # Format and auto-commit changes
      - name: Format with Black
        run: black src/ tests/

      - name: Commit formatting changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "style: format code with black"
          branch: ${{ github.head_ref }}

      # Run other linting checks
      - name: Run ruff
        run: ruff check src tests

      - name: Run mypy
        run: |
          cd src && PYTHONPATH=. mypy .

      - name: Run pylint
        run: pylint src tests

  test:
    needs: lint # Run tests after linting
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      # Cache dependencies
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r install/requirements.txt
          pip install -r install/requirements-dev.txt

      # Split tests into categories
      - name: Run unit tests
        env:
          MOCK_HARDWARE: "true"
          TEST_MODE: "CI"
        run: |
          pytest -v tests/unit/ --cov=src --cov-report=xml --junitxml=pytest-results.xml

      - name: Run API tests
        env:
          MOCK_HARDWARE: "true"
          TEST_MODE: "CI"
        run: |
          pytest -v tests/api/ --cov=src --cov-append --junitxml=pytest-results.xml

      # Add test summary
      - name: Test Summary
        uses: test-summary/action@v2
        with:
          paths: "pytest-results.xml"
        if: always()
